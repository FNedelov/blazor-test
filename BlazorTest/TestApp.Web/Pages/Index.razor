@page "/"
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />


<h3>ClaimsPrincipal Data</h3>

<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p>@_authMessage</p>

@if (_claims.Count() > 0)
{
    <ul>
    @foreach (var claim in _claims)
    {
                <li>@claim.Type: @claim.Value</li>
    }
    </ul>
}

<AuthorizeView Roles="user">
    <Authorized>
        <div>You are a user!</div>
    </Authorized>
    <NotAuthorized>
        <div>You are not a user!</div>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="admin">
    <Authorized>
        <div>You are an admin!</div>
    </Authorized>
    <NotAuthorized>
        <div>You are not an admin!</div>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="admin, batman">
    <Authorized>
        <div>You are batman!</div>
    </Authorized>
</AuthorizeView>

@code {

    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}